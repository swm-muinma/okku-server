name: Deploy to Amazon ECS

on:
  push:
    branches: ["dev"]

env:
  AWS_REGION: ap-northeast-2 # your AWS region
  ECR_REPOSITORY: okku.dev # your Amazon ECR repository name
  ECS_SERVICE: crud-server-service # your Amazon ECS service name
  ECS_CLUSTER: okku-dev # your Amazon ECS cluster name
  ECS_TASK_DEFINITION: crud-server-task-definition-dev.json # path to your Amazon ECS task definition file
  CONTAINER_NAME: crud-server # name of the container in the task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env, Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: crud-${{ github.sha }}
        run: |
          mkdir -p ./src/main/resources
          chmod -R 755 ./src/main/resources
          echo "${{ secrets.ENV_DEV }}" | base64 --decode > ./src/main/resources/application.yml
          docker build --build-arg SENTRY_AUTH_TOKEN="$SENTRY_AUTH_TOKEN" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: ["dev"]

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: okku.dev # set this to your Amazon ECR repository name
  ECS_SERVICE: crud-server-service # set this to your Amazon ECS service name
  ECS_CLUSTER: okku-dev # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    crud-server-task-definition-dev.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    crud-server # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      AUTH_KEY_PATH: ${{ secrets.AUTH_KEY_PATH }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MONGODB_URI_MAIN: ${{secrets.MONGODB_URI_MAIN}}
      MONGODB_URI_REVIEW_INSIGHT: ${{secrets.MONGODB_URI_REVIEW_INSIGHT}}
      MONGODB_URI_REVIEW: ${{secrets.MONGODB_URI_REVIEW}}
      EXPIRATION_TIME: ${{secrets.EXPIRATION_TIME}}
      REFRESHTOKEN_EXPIRATION_TIME: ${{secrets.REFRESHTOKEN_EXPIRATION_TIME}}
      BASE_REDIRECT_URI: ${{secrets.BASE_REDIRECT_URI}}
      APPLE_CLIENT_ID: ${{secrets.APPLE_CLIENT_ID}}
      APPLE_TEAM_ID: ${{secrets.APPLE_TEAM_ID}}
      APPLE_SCOPE: ${{secrets.APPLE_SCOPE}}
      APPLE_KEY_ID: ${{secrets.APPLE_KEY_ID}}
      APPLE_KEY_FILE_PATH: ${{secrets.APPLE_KEY_FILE_PATH}}
      KAKAO_CLIENT_ID: ${{secrets.KAKAO_CLIENT_ID}}
      SCRAPER_URL: ${{secrets.SCRAPER_URL}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg AUTH_KEY_PATH="${{env.AUTH_KEY_PATH}}" \
          --build-arg JWT_SECRET="${{env.JWT_SECRET}}" \
          --build-arg MONGODB_URI_MAIN="${{env.MONGODB_URI_MAIN}}" \
          --build-arg MONGODB_URI_REVIEW_INSIGHT="${{env.MONGODB_URI_REVIEW_INSIGHT}}" \
          --build-arg MONGODB_URI_REVIEW="${{env.MONGODB_URI_REVIEW}}" \
          --build-arg EXPIRATION_TIME="${{env.EXPIRATION_TIME}}" \
          --build-arg REFRESHTOKEN_EXPIRATION_TIME="${{env.REFRESHTOKEN_EXPIRATION_TIME}}" \
          --build-arg BASE_REDIRECT_URI="${{env.BASE_REDIRECT_URI}}" \
          --build-arg APPLE_CLIENT_ID="${{env.APPLE_CLIENT_ID}}" \
          --build-arg APPLE_TEAM_ID="${{env.APPLE_TEAM_ID}}" \
          --build-arg APPLE_SCOPE="${{env.APPLE_SCOPE}}" \
          --build-arg APPLE_KEY_ID="${{env.APPLE_KEY_ID}}" \
          --build-arg APPLE_KEY_FILE_PATH="${{env.APPLE_KEY_FILE_PATH}}" \
          --build-arg KAKAO_CLIENT_ID="${{env.KAKAO_CLIENT_ID}}" \
          --build-arg SCRAPER_URL="${{env.SCRAPER_URL}}" \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
